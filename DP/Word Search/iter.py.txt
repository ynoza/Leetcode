# https://leetcode.com/problems/word-search/
class Solution:    
    def exist(self, board: List[List[str]], word: str) -> bool:
        if len(word)==0: return True
        m=len(board)
        n=len(board[0])
        # print(m,n)
        for i in range(m):
            for j in range(n):
                if word[0]==board[i][j]:
                    vis=set()
                    vis.add((i,j))
                    stack=[(i,j,1,vis)]
                    while(len(stack)>0):
                        k,l,ind,visited=stack.pop()
                        if ind==len(word):
                            return True
                        if (k+1<m and board[k+1][l]==word[ind] and (k+1,l) not in visited):
                            c = visited.copy()
                            c.add((k+1,l))
                            stack.append((k+1,l,ind+1,c))
                        if (k-1>=0 and board[k-1][l]==word[ind] and (k-1,l) not in visited): 
                            c = visited.copy()
                            c.add((k-1,l))
                            stack.append((k-1,l,ind+1,c))
                        if (l+1<n and board[k][l+1]==word[ind] and (k,l+1) not in visited):
                            c = visited.copy()
                            c.add((k,l+1))
                            stack.append((k,l+1,ind+1,c))
                        if (l-1>=0 and board[k][l-1]==word[ind] and (k,l-1) not in visited):
                            visited.add((k,l-1))
                            stack.append((k,l-1,ind+1,visited))
                        
        return False